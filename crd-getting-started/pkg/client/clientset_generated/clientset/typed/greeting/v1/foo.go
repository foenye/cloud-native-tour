// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	greetingv1 "github.com/foenye/cloud-native-tour/crd-getting-started/pkg/apis/greeting/v1"
	scheme "github.com/foenye/cloud-native-tour/crd-getting-started/pkg/client/clientset_generated/clientset/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// FoosGetter has a method to return a FooInterface.
// A group's client should implement this interface.
type FoosGetter interface {
	Foos(namespace string) FooInterface
}

// FooInterface has methods to work with Foo resources.
type FooInterface interface {
	Create(ctx context.Context, foo *greetingv1.Foo, opts metav1.CreateOptions) (*greetingv1.Foo, error)
	Update(ctx context.Context, foo *greetingv1.Foo, opts metav1.UpdateOptions) (*greetingv1.Foo, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*greetingv1.Foo, error)
	List(ctx context.Context, opts metav1.ListOptions) (*greetingv1.FooList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *greetingv1.Foo, err error)
	FooExpansion
}

// foos implements FooInterface
type foos struct {
	*gentype.ClientWithList[*greetingv1.Foo, *greetingv1.FooList]
}

// newFoos returns a Foos
func newFoos(c *GreetingV1Client, namespace string) *foos {
	return &foos{
		gentype.NewClientWithList[*greetingv1.Foo, *greetingv1.FooList](
			"foos",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *greetingv1.Foo { return &greetingv1.Foo{} },
			func() *greetingv1.FooList { return &greetingv1.FooList{} },
			gentype.PrefersProtobuf[*greetingv1.Foo](),
		),
	}
}
